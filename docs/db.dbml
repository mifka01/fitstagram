// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Project Fitstagram {
database_type: "MySQL"
}

Table Media_File {
  id integer [pk, increment]
  path varchar
  name varchar [not null]
  post_id integer [not null, ref: > Post.id]
}

Table Tag {
    id integer [pk, increment]
    created_by integer [not null, ref: > User.id]
    name varchar [not null, unique]
    created_at timestamp
}

Table Post_Tag {
    post_id integer [not null, ref: > Post.id]
    tag_id integer [not null, ref: > Tag.id]
    created_at timestamp
    Indexes {
        (post_id, tag_id) [pk, unique]
    }
}

Table Post {
  id integer [pk, increment]
  created_by integer [not null, ref: > User.id]
  is_private boolean [not null]
  group_id integer [ ref: > Group.id]
  upvote_count integer [default: 0]
  downvote_count integer [default: 0]
  description varchar
  place varchar
  deleted boolean 
  banned boolean
  created_at timestamp
  updated_at timestamp [default: `CURRENT_TIMESTAMP`]
}

Table User {
    id integer [pk, increment]
    username varchar [not null]
    email varchar [not null]
    password_hash varchar [not null]
    password_reset_token varchar
    verification_token varchar [not null]
    auth_key varchar [not null]
    active boolean 
    deleted boolean 
    banned boolean
    show_activity boolean 
    created_at timestamp
    updated_at timestamp [default: `CURRENT_TIMESTAMP`]
}

Table Post_Vote {
  up boolean [not null]
  voted_by integer [not null, ref: > User.id]
  post_id integer [not null, ref: > Post.id]
  created_at timestamp
  updated_at timestamp [default: `CURRENT_TIMESTAMP`]
 
  Indexes {
    (post_id, voted_by) [pk, unique]
  }
}

Table Comment {
  id integer [pk, increment]
  content varchar [not null]
  created_by integer [not null, ref: > User.id]
  post_id integer [not null, ref: > Post.id]
  deleted boolean 
  banned boolean
  created_at timestamp
  updated_at timestamp [default: `CURRENT_TIMESTAMP`]
}

Table Group {
  id integer [pk, increment]
  name varchar [not null]
  description varchar
  owner_id integer [not null, ref: > User.id]
  deleted boolean
  banned boolean
  created_at timestamp 
  updated_at timestamp [default: `CURRENT_TIMESTAMP`]
}

Table Group_Member {
  group_id integer [not null, ref: > Group.id]
  user_id integer [not null, ref: > User.id]
  created_at timestamp 
  Indexes {
    (user_id, group_id) [pk,unique]
  }
}

Table Group_Join_Request {
  id integer [pk, increment]
  group_id integer [not null, ref: > Group.id]
  created_by integer [not null, ref: > User.id]
  pending boolean
  declined boolean
  accepted boolean
  created_at timestamp
  updated_at timestamp [default: `CURRENT_TIMESTAMP`]
}

Table Permitted_User {
    user_id int [ref: > User.id] 
    permitted_user_id int [ref: > User.id] 
    
    Indexes {
    (user_id, permitted_user_id) [pk, unique] 
    }
}


// Auth tables
Table auth_assignment {
  item_name varchar(64) [not null]
  user_id varchar(64) [not null]
  created_at int
}

Table auth_item {
  name varchar(64) [not null]
  type smallint [not null]
  description text
  rule_name varchar(64)
  data blob
  created_at int
  updated_at int
}

Table auth_item_child {
  parent varchar(64) [not null]
  child varchar(64) [not null]
}

Table auth_rule {
  name varchar(64) [not null]
  data blob
  created_at int
  updated_at int
}

Ref: auth_assignment.user_id > User.id // Assuming there is a 'users' table with id
Ref: auth_item.name > auth_assignment.item_name
Ref: auth_item_child.parent > auth_item.name
Ref: auth_item_child.child > auth_item.name
Ref: auth_item.rule_name > auth_rule.name


Table session {
    id varchar [pk]
    data text
    expire int
    user_id int [ref: > User.id]
    last_write timestamp
    Indexes {
        (id) [pk, unique]
    }
}
